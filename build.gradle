/*
 * Copyright (c) 2018 Boris Fox, REDCOM-Internet CJSC
 * All rights reserved.
 */
plugins {
    id 'idea'
    id 'java-library'
	id 'signing'
    id 'maven-publish'
    id 'net.linguica.maven-settings' version '0.5'
}

description = 'DaData API client for Java'
group = 'ru.redcom.software.libs'
version = '0.0.1'
sourceCompatibility = 1.8

ext {
    springBootVersion = '2.0.4.RELEASE'
    encoding = 'UTF-8'
	// pom attributes
	artifactName = name
	artifactDescription = description
	mavenCentralPublishingURL = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
	organizationName = 'REDCOM-Internet'
	organizationURLpath = 'github.com/redcom-internet'
	organizationURL = 'https://' + organizationURLpath
	projectRootURLpath = '/software-java-libs-dadata-api-client'
	projectRootURL = organizationURL + projectRootURLpath
	projectIssueURL = projectRootURL + '/issues'
	projectSCM = 'GitHub'
	projectLicense = 'MIT License'
	projectLicenseURL = projectRootURL + '/blob/master/LICENSE.txt'
	projectSCMConnection = 'scm:git:git://' + organizationURLpath + projectRootURLpath + '.git'
	projectDeveloper = 'Boris Fox'
}

// Manifest attributes for all archives
def sharedManifest = manifest {
    attributes('Implementation-Title': project.name,
               'Implementation-Version': project.version,
               'Built-By': System.getProperty("user.name"),
               'Build-Jdk': System.getProperty("java.version"))
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
//	        resolveStrategy = Closure.DELEGATE_FIRST
            resolveStrategy = DELEGATE_FIRST

            description artifactDescription
            name artifactName
            url projectRootURL
            organization {
                name organizationName
                url organizationURL
            }
            issueManagement {
                system projectSCM
                url projectIssueURL
            }
            licenses {
                license {
                    name projectLicense
                    url projectLicenseURL
                    distribution 'repo'
                }
            }
            scm {
                url projectRootURL
                connection projectSCMConnection
                developerConnection projectSCMConnection
            }
            developers {
                developer {
                    name projectDeveloper
                }
            }
        }
    }
}

defaultTasks 'build'

tasks.withType(JavaCompile).each { it.options.setEncoding("${project.ext.encoding}") }

model {
	tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
	}

	tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
	}
	tasks.publishMavenJavaPublicationToMavenCentralRepository {
        dependsOn project.tasks.signArchives
	}
}


// Live integration tests task
// usage: gradlew liveTest -Papi-key=your_api_key -Psecret-key=your_secret_key
task liveTest(type: Test, description: 'Runs live integration tests', group: 'Verification') {
    doFirst {
        // check credentials properties are defined
        def apiKey = findProperty('api-key')
        def secretKey = findProperty('secret-key')
        if (apiKey == null || secretKey == null)
            throw new InvalidUserDataException("'api-key' and 'secret-key' properties must be specified with -P to run live integration tests.")
        // set system properties for tests
        systemProperties['dadata.api-key'] = apiKey
        systemProperties['dadata.secret-key'] = secretKey
        systemProperties['live-tests'] = 'enabled'
    }
    include 'ru/redcom/software/util/integration/api/client/dadata/IntegrationTests/live/**'
}

// Skip live integration tests by default
test {
    exclude 'ru/redcom/software/util/integration/api/client/dadata/IntegrationTests/live/**'
}

javadoc {
    options.encoding = project.ext.encoding
    options.charSet = project.ext.encoding
}

// Binaries archive
jar {
    manifest { from sharedManifest }
}

// Sources archive
task sourcesJar(type: Jar) {
    classifier = 'sources'
    manifest { from sharedManifest }
    from sourceSets.main.allJava
}

// Javadoc archive
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    manifest { from sharedManifest }
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    // signing key id and password must be defined in gradle.properties
    sign configurations.archives
}

// Publications
publishing {
    publications {
        mavenJava(MavenPublication) {
	        customizePom(pom)
            from components.java

	        // create the sign pom artifact
	        pom.withXml {
	            def pomFile = file("${project.buildDir}/generated-pom.xml")
	            writeTo(pomFile)
	            def pomAscFile = signing.sign(pomFile).signatureFiles[0]
	            artifact(pomAscFile) {
	                classifier = null
	                extension = 'pom.asc'
	            }
	        }

            artifact sourcesJar {
				classifier = 'sources'
	        }
            artifact javadocJar {
				classifier = 'javadoc'
	        }

	        // create the signed artifacts
	        project.tasks.signArchives.signatureFiles.each {
	            artifact(it) {
	                def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
	                if (matcher.find()) {
	                    classifier = matcher.group(1)
	                } else {
	                    classifier = null
	                }
	                extension = 'jar.asc'
	            }
	        }
        }
    }
    repositories {
		maven {
	        name = 'MavenCentral'
            url mavenCentralPublishingURL
	        // must be defined in gradle.properties or taken from maven settings plugin
	        //credentials {
			//	username sonatypeUsername
			//	password sonatypePassword
			//}
        }
    }
}

// Repositories and dependencies
repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: "$springBootVersion"
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.+'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "$springBootVersion"
    testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.+'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.+'
    testImplementation group: 'com.spotify', name: 'hamcrest-pojo', version: '1.+'
    testImplementation group: 'uk.co.datumedge', name: 'hamcrest-json', version: '0.+'
}
