/*
 * Copyright (c) 2018 Boris Fox, REDCOM-Internet CJSC
 * All rights reserved.
 */
plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.linguica.maven-settings' version '0.5'
}

description = 'DaData API client for Java'
group = 'ru.redcom.software'
version = '0.0.1-RELEASE'
sourceCompatibility = 1.8

def publishRepositoryURL = 'sftp://devel.ws.redcom.ru:22/var/spool/users/maven2'
def artifactName = name
def artifactDescription = description

ext {
    springBootVersion = '2.0.4.RELEASE'
    encoding = 'UTF-8'
    // Manifest attributes for all archives
    sharedManifest = manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty("user.name"),
                'Build-Jdk': System.getProperty("java.version"))
    }
}

defaultTasks 'build'

javadoc {
    options.encoding = project.ext.encoding
    options.charSet = project.ext.encoding
}

tasks.withType(JavaCompile).each { it.options.setEncoding("${project.ext.encoding}") }

// Skip live integration tests by default
test {
    exclude 'ru/redcom/software/util/integration/api/client/dadata/IntegrationTests/live/**'
}

// Live integration tests task
// usage: gradlew liveTest -Papi-key=your_api_key -Psecret-key=your_secret_key
task liveTest(type: Test, description: 'Runs live integration tests', group: 'Verification') {
    doFirst {
        // check credentials properties are defined
        def apiKey = findProperty('api-key')
        def secretKey = findProperty('secret-key')
        if (apiKey == null || secretKey == null)
            throw new InvalidUserDataException("'api-key' and 'secret-key' properties must be specified with -P to run live integration tests.")
        // set system properties for tests
        systemProperties['dadata.api-key'] = apiKey
        systemProperties['dadata.secret-key'] = secretKey
        systemProperties['live-tests'] = 'enabled'
    }
    include 'ru/redcom/software/util/integration/api/client/dadata/IntegrationTests/live/**'
}

// Binaries archive
jar {
    manifest { from sharedManifest }
}

// Sources archive
task sourcesJar(type: Jar) {
    classifier = 'sources'
    manifest { from sharedManifest }
    from sourceSets.main.allJava
}

// Javadoc archive
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    manifest { from sharedManifest }
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Publications
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            //noinspection GroovyAssignabilityCheck
            artifact sourcesJar
            //noinspection GroovyAssignabilityCheck
            artifact javadocJar
	        // Add custom attributes to POM
	        pom.withXml {
		        asNode().appendNode('name', artifactName)
		        asNode().appendNode('description', artifactDescription)
	        }
        }
    }
    repositories {
        maven {
	        name = 'devel.ws.redcom.ru'
	        // SFTP publishing. Credentials are taken from the local Maven settings
            url publishRepositoryURL
        }
    }
}

// Repositories and dependencies
repositories {
    mavenLocal()
	mavenCentral()
//	maven { url = 'https://repo.spring.io/snapshot' }
//	maven { url = 'https://repo.spring.io/milestone' }
//	maven {
//	    name = 'devel.ws.redcom.ru'
//	    url = 'http://devel.ws.redcom.ru/maven2'
//  }
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: "$springBootVersion"

    implementation group: 'org.projectlombok', name: 'lombok', version: '1.16.+'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.+'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "$springBootVersion"
    testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.+'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.+'
    testImplementation group: 'com.spotify', name: 'hamcrest-pojo', version: '1.+'
    testImplementation group: 'uk.co.datumedge', name: 'hamcrest-json', version: '0.+'
}
