/*
 * Copyright (c) 2018 Boris Fox, REDCOM-Internet CJSC
 * All rights reserved.
 */

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3/userguide/tutorial_java_projects.html
 */

/*
 * https://guides.gradle.org/building-java-libraries/
 * https://docs.gradle.org/current/userguide/java_library_plugin.html
 */

plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.linguica.maven-settings' version '0.5'
}

description = 'DaData API client for Java'
group = 'ru.redcom.software'
version = '0.0.1-RELEASE'
sourceCompatibility = 1.8

def publishRepositoryURL = 'sftp://devel.ws.redcom.ru:22/var/spool/users/maven2'
def artifactName = project.name
def artifactDescription = description

ext {
    springBootVersion = '2.0.1.RELEASE'
    encoding = 'UTF-8'
    // Common manifest attributes
    sharedManifest = manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty("user.name"),
                'Build-Jdk': System.getProperty("java.version"))
    }
}

compileJava.options.encoding = "$encoding"
javadoc {
    options.encoding = "$encoding"
    options.charSet = "$encoding"
//    failOnError = true
}

// Binaries archive
jar {
    manifest { from sharedManifest }
}

// Sources archive
task sourcesJar(type: Jar) {
    classifier = 'sources'
    manifest { from sharedManifest }
    from sourceSets.main.allJava
}

// Javadoc archive
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    manifest { from sharedManifest }
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Publications
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            //noinspection GroovyAssignabilityCheck
            artifact sourcesJar
            //noinspection GroovyAssignabilityCheck
            artifact javadocJar
	        // Add custom attributes to POM
	        pom.withXml {
		        asNode().appendNode('name', artifactName)
		        asNode().appendNode('description', artifactDescription)
	        }
        }
    }
    repositories {
        maven {
	    name = 'devel.ws.redcom.ru'
	    // Requires support of the PUT method on web server
            // url "http://devel.ws.redcom.ru/maven2"
	    // Requires FTP server
            // url "ftp://devel.ws.redcom.ru/var/spool/users/maven2"
	    // SFTP publishing. Credentials are taken from the Maven settings
            url publishRepositoryURL
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
	mavenLocal()
	maven { url = 'https://repo.spring.io/snapshot' }
	maven { url = 'https://repo.spring.io/milestone' }
	maven {
	    name = 'devel.ws.redcom.ru'
	    url = 'http://devel.ws.redcom.ru/maven2'
        }
}

/*
configurations {
	implementation.exclude module: 'spring-boot-starter'
}
*/

dependencies {
    // This is an example of a dependency which is exported to consumers, that is to say found on their compile classpath.
    //api group: 'xxx', name: 'yyy', version: 'zzz'

    // This is an exampe of a dependency which is used internally, and not exposed to consumers on their own compile classpath.
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: "$springBootVersion"
//    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "$springBootVersion"
//    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "$springBootVersion"

    implementation group: 'org.projectlombok', name: 'lombok', version: '1.16.20'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "$springBootVersion"
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'com.spotify', name: 'hamcrest-pojo', version: '1.1.1'
}
